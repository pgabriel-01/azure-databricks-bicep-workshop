name: 'Bicep Azure Databricks CI/CD'

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'bicep/**'
      - '.github/workflows/bicep.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'bicep/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      destroy:
        description: 'Destroy infrastructure'
        required: false
        default: false
        type: boolean

# Grant GITHUB_TOKEN write permissions for security events
permissions:
  id-token: write
  contents: read
  security-events: write

env:
  AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}

jobs:
  bicep-validate:
    name: 'Bicep Validate'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ env.AZURE_CLIENT_ID }}
        tenant-id: ${{ env.AZURE_TENANT_ID }}
        subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

    - name: Setup Azure CLI
      uses: azure/CLI@v2
      with:
        azcliversion: latest

    - name: Install Bicep
      run: |
        az bicep install
        az bicep upgrade

    - name: Bicep Format Check
      run: |
        az bicep format --file main.bicep --stdout > formatted.bicep
        if ! diff -q main.bicep formatted.bicep >/dev/null; then
          echo "Bicep files are not properly formatted"
          echo "Run 'az bicep format --file main.bicep --outfile main.bicep' to fix formatting"
          exit 1
        fi
      working-directory: ./bicep

    - name: Bicep Lint
      run: |
        az bicep build --file main.bicep --stdout > /dev/null
        echo "Bicep linting completed successfully"
      working-directory: ./bicep

    - name: Bicep Validate Templates
      run: |
        for param_file in parameters/*.bicepparam; do
          env_name=$(basename "$param_file" .bicepparam)
          echo "Validating $env_name environment..."
          
          # Create temporary resource group for validation
          temp_rg="bicep-validation-$env_name-$(date +%s)"
          az group create --name "$temp_rg" --location "East US"
          
          # Validate deployment
          az deployment group validate \
            --resource-group "$temp_rg" \
            --template-file main.bicep \
            --parameters "$param_file"
          
          # Clean up temporary resource group
          az group delete --name "$temp_rg" --yes --no-wait
        done
      working-directory: ./bicep

  security-scan:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    needs: bicep-validate
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.28.0
      with:
        scan-type: 'config'
        scan-ref: './bicep'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  plan:
    name: 'Bicep Plan'
    runs-on: ubuntu-latest
    needs: [bicep-validate, security-scan]
    if: github.event_name != 'workflow_dispatch' || !inputs.destroy
    strategy:
      matrix:
        environment: [dev, staging, prod]
        exclude:
          - environment: ${{ github.ref != 'refs/heads/main' && 'prod' || 'none' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ env.AZURE_CLIENT_ID }}
        tenant-id: ${{ env.AZURE_TENANT_ID }}
        subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

    - name: Setup Azure CLI
      uses: azure/CLI@v2
      with:
        azcliversion: latest

    - name: Install Bicep
      run: |
        az bicep install
        az bicep upgrade

    - name: Create Resource Group
      run: |
        rg_name="bicep-databricks-${{ matrix.environment }}-rg"
        az group create --name "$rg_name" --location "East US"

    - name: Bicep What-If Analysis
      id: whatif
      run: |
        rg_name="bicep-databricks-${{ matrix.environment }}-rg"
        
        # Run what-if analysis
        whatif_output=$(az deployment group what-if \
          --resource-group "$rg_name" \
          --template-file main.bicep \
          --parameters "parameters/${{ matrix.environment }}.bicepparam" \
          --result-format FullResourcePayloads 2>&1)
        
        # Save output for comment
        echo "WHATIF_OUTPUT<<EOF" >> $GITHUB_ENV
        echo "$whatif_output" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
        echo "What-if analysis completed for ${{ matrix.environment }}"
      working-directory: ./bicep

    - name: Comment PR with What-If Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const output = `#### Bicep What-If Analysis for ${{ matrix.environment }}
          
          <details><summary>Show What-If Results</summary>
          
          \`\`\`
          ${{ env.WHATIF_OUTPUT }}
          \`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

  deploy:
    name: 'Bicep Deploy'
    runs-on: ubuntu-latest
    needs: plan
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        environment: 
          - ${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'dev' }}
    environment: ${{ matrix.environment }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ env.AZURE_CLIENT_ID }}
        tenant-id: ${{ env.AZURE_TENANT_ID }}
        subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

    - name: Setup Azure CLI
      uses: azure/CLI@v2
      with:
        azcliversion: latest

    - name: Install Bicep
      run: |
        az bicep install
        az bicep upgrade

    - name: Deploy or Destroy Infrastructure
      id: deploy
      run: |
        rg_name="bicep-databricks-${{ matrix.environment }}-rg"
        
        if [ "${{ inputs.destroy }}" == "true" ]; then
          echo "Destroying infrastructure for ${{ matrix.environment }}..."
          az group delete --name "$rg_name" --yes
          echo "Infrastructure destroyed successfully"
        else
          echo "Deploying infrastructure for ${{ matrix.environment }}..."
          
          # Ensure resource group exists
          az group create --name "$rg_name" --location "East US"
          
          # Deploy infrastructure
          deployment_output=$(az deployment group create \
            --resource-group "$rg_name" \
            --template-file main.bicep \
            --parameters "parameters/${{ matrix.environment }}.bicepparam" \
            --output json)
          
          echo "DEPLOYMENT_OUTPUT<<EOF" >> $GITHUB_ENV
          echo "$deployment_output" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          echo "Infrastructure deployed successfully"
        fi
      working-directory: ./bicep

    - name: Output Deployment Results
      if: ${{ !inputs.destroy }}
      run: |
        echo "Deployment completed successfully!"
        echo "Workspace URL: $(echo '${{ env.DEPLOYMENT_OUTPUT }}' | jq -r '.properties.outputs.databricksWorkspaceUrl.value')"
        echo "Resource Group: $(echo '${{ env.DEPLOYMENT_OUTPUT }}' | jq -r '.properties.outputs.resourceGroupName.value')"

    - name: Post-Deployment Validation
      if: ${{ !inputs.destroy }}
      run: |
        rg_name="bicep-databricks-${{ matrix.environment }}-rg"
        
        echo "Validating deployed resources..."
        
        # Check if Databricks workspace is accessible
        workspace_name=$(echo '${{ env.DEPLOYMENT_OUTPUT }}' | jq -r '.properties.outputs.databricksWorkspaceName.value')
        workspace_status=$(az databricks workspace show \
          --resource-group "$rg_name" \
          --name "$workspace_name" \
          --query "provisioningState" -o tsv)
        
        if [ "$workspace_status" == "Succeeded" ]; then
          echo "Databricks workspace is healthy"
        else
          echo "Warning: Databricks workspace status is $workspace_status"
        fi
        
        echo "Post-deployment validation completed"

  notify:
    name: 'Notify Teams'
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify Success
      if: needs.deploy.result == 'success' && !inputs.destroy
      run: |
        echo "Deployment successful! Infrastructure is ready for use."
        # Add your notification logic here (Teams, Slack, etc.)
        
    - name: Notify Destruction
      if: needs.deploy.result == 'success' && inputs.destroy
      run: |
        echo "Infrastructure destruction completed successfully."
        # Add your notification logic here (Teams, Slack, etc.)
        
    - name: Notify Failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "Deployment failed! Please check the logs for details."
        # Add your notification logic here (Teams, Slack, etc.)